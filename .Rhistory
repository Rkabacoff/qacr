pred <- predict(fit, newdata=heart, type="response")
pred
lift_plot(heart$disease, pred, positive="yes")
results <- lift_plot(heart$disease, pred, positive="yes")
results
library(qacr)
build_site()
build_site()
?breast
data(breast)
fit <- glm(recurrence ~ . , breast, family=binomial)
summary(fit)
pred <- predict(fit, newdata=breast, type="response")
results <- lift_plot(breast$recurrence, pred, positive="yes")
print(results)
contents(breast)
data(breast)
breast <- na.omit(breast)
fit <- glm(recurrence ~ . , breast, family=binomial)
pred <- predict(fit, newdata=breast, type="response")
results <- lift_plot(breast$recurrence, pred, positive="yes")
print(results)
library(qacr)
data(heart)
heart <- na.omit(heart)
fit <- glm(disease ~ . , heart, family=binomial)
pred <- predict(fit, newdata=heart, type="response")
debug(lift_plot)
results <- lift_plot(heart$disease, pred, positive="yes")
tbl1
tbl2
tbl
tbl
tbl
tbl
tbl
tbl
tbl10
tbl0
tbl
rndm
tbl
rbind(tbl0, tbl)
ggplot(data=rbind(tbl0, tbl), aes(x=decile, y=gain)) +
geom_point(size=3) + geom_line()
ggplot(data=rbind(tbl0, tbl), aes(x=decile, y=gain)) +
geom_point(size=3) + geom_line() +
scale_x_continuous(breaks = seq(0, 100, 10),
limits=c(0, 100)) +
scale_y_continuous(breaks = seq(0, 100, 10),
limits=c(0, 100))
ggplot(data=rbind(tbl0, tbl), aes(x=decile, y=gain)) +
geom_point(size=3) + geom_line() +
scale_x_continuous(breaks = seq(0, 100, 10),
limits=c(0, 100))
ggplot(data=rbind(tbl0, tbl), aes(x=decile, y=gain)) +
geom_point(size=3) + geom_line() +
scale_y_continuous(breaks = seq(0, 100, 10),
limits=c(0, 100))
rbind(tbl0, tbl)
ggplot(data=rbind(tbl0, tbl), aes(x=decile, y=gain)) +
geom_point(size=3) + geom_line() +
scale_x_continuous(breaks = seq(0, 100, 10),
limits=c(0, 100)) +
scale_y_continuous(breaks = seq(0, 100, 10),
limits=c(0, 101))
library(qacr)
build_site()
library(qacr)
build_site()
data(heart)
heart <- na.omit(heart)
fit <- glm(disease ~ . , heart, family=binomial)
pred <- predict(fit, newdata=heart, type="response")
lift_plot(heart$disease, pred, positive="yes")
debug(lift_plot)
results <- lift_plot(heart$disease, pred, positive="yes")
plot(p1)
plot(p2)
ggplot(data=tbl, aes(x=decile, y=cumlift)) +
geom_point() + geom_line()
ggplot(data=tbl, aes(x=decile, y=cumlift)) +
geom_point() + geom_line() +
scale_x_continuous(breaks = seq(10, 100, 10),
limits=c(10, 100))
ggplot(data=tbl, aes(x=decile, y=cumlift)) +
geom_point() + geom_line() +
scale_x_continuous(breaks = seq(10, 100, 10),
limits=c(10, 100)) +
geom_point(data=rndm, aes(x=x, y=y), color="red")
tbl
rndm
rndm <- tibble(x=seq(10,100, 10), y=1)
ggplot(data=tbl, aes(x=decile, y=cumlift)) +
geom_point() + geom_line() +
scale_x_continuous(breaks = seq(10, 100, 10),
limits=c(10, 100)) +
geom_point(data=rndm, aes(x=x, y=y), color="red")
ggplot(data=tbl, aes(x=decile, y=cumlift)) +
geom_point() + geom_line() +
scale_x_continuous(breaks = seq(10, 100, 10),
limits=c(10, 100)) +
geom_point(data=rndm, aes(x=x, y=y), color="red") +
geom_line(data=rndm, aes(x=x, y=y), color="red", linetype=2)
data(heart)
fit <- glm(disease ~ . , heart, family=binomial)
library(qacr)
data(heart)
fit <- glm(disease ~ . , heart, family=binomial)
pred <- predict(fit, newdata=heart, type="response")
results <- lift_plot(heart$disease, pred, positive="yes")
print(results)
debug(lift_plot)
results <- lift_plot(heart$disease, pred, positive="yes")
tbl
results <- lift_plot(heart$disease, pred, positive="yes")
tbl
results <- lift_plot(heart$disease, pred, positive="yes")
df
df
data(heart)
heart <- na.omit(heart)
fit <- glm(disease ~ . , heart, family=binomial)
pred <- predict(fit, newdata=heart, type="response")
debug(lift_plot)
results <- lift_plot(heart$disease, pred, positive="yes")
library(qacr)
build_site()
library(qacr)
build_site()
histograms(cars74, bins=20)
histograms(cars74, bins=20, fill="brickred")
colors()
histograms(cars74, bins=20, fill="darkred")
build_site()
histograms(cars74, bins=15, fill="darkred")
histograms(cars74, bins=10, fill="darkred")
library(qacr)
build_site()
library(qacr)
# logistic regression
data(heart)
heart <- na.omit(heart)
fit <- glm(disease ~ . , heart, family=binomial)
prob <- predict(fit, newdata=heart, type="response")
roc_plot(heart$disease, prob, positive="yes")
library(qacr)
build_site()
?geom_roc
?predict.glm
geom_roc
getAnywhere(geom_roc)
GeomRoc
getAnywhere(GeomRoc)
univariate_plot(cardata, highway_mpg)
univariate_plot(cardata, highway_mpg)
names(cardata)
univariate_plot(cardata, msrp)
univariate_plot(cardata, engine_hp)
univariate_plot(cardata, engine_hp, alpha=.2)
univariate_plot(cardata, engine_hp, alpha=.1)
univariate_plot(cardata, city_mpg)
univariate_plot(cardata, city_mpg, densitycolor="darkred")
univariate_plot(cardata, city_mpg, densitycolor="darkred", pointcolor="darkred")
univariate_plot(cardata, city_mpg, densitycolor="darkred", pointcolor="darkred", alpha=1)
univariate_plot(cardata, city_mpg, densitycolor="darkred", pointcolor="darkred", alpha=.1)
univariate_plot(cardata, city_mpg, densitycolor="darkred", pointcolor="darkred", alpha=.5)
univariate_plot(cardata, city_mpg)
names(student)
univariate(student, freetime)
univariate_plot(student, freetime)
univariate_plot(student, absences)
univariate_plot(student, G3)
names(coffee)
univariate_plot(coffee, sweetness)
univariate_plot(coffee, color)
univariate_plot(coffee, total_cup_points)
names(amazon)
univariate_plot(amazon, number)
univariate_plot(amazon, number, density=FALSE)
univariate_plot(amazon, number, density=FALSE, bins=20)
univariate_plot(amazon, number, density=FALSE, bins=50)
univariate_plot(amazon, number, density=FALSE, bins=100)
univariate_plot(amazon, number, density=FALSE, bins=100, alpha=.01)
univariate_plot(amazon, number, density=FALSE, bins=100, alpha=.05)
univariate_plot(amazon, number, density=FALSE, bins=100, alpha=.02)
library(qacr)
build_site()
univariate_plot(cardata, city_mpg, fill="orange" pointcolor="darkgreen",
densitycolor="darkgreen", alpha=.4)
univariate_plot(cardata, city_mpg, fill="orange", pointcolor="darkgreen",
densitycolor="darkgreen", alpha=.4)
univariate_plot(cardata, city_mpg, fill="#9ebcda", pointcolor="#8856a7",
densitycolor="#e0ecf4", alpha=.4)
univariate_plot(cardata, city_mpg, fill="7fcdbb",
pointcolor="#2c7fb8",
densitycolor="#edf8b1", alpha=.4)
univariate_plot(cardata, city_mpg, fill="7fcdbb",
pointcolor="#2c7fb8",
densitycolor="#edf8b1", alpha=.4)
#' the histogram. (default=TRUE)
#' @param densitycolor fill color for density curve.
#' @param alpha Alpha transparency (0-1) for the density curve and
#' jittered points.
#' @import ggplot2
#' @import patchwork
#' @return a ggplot2 graph
#' @export
#' @examples
#' univariate_plot(mtcars, mpg)
univariate_plot(cardata, city_mpg, fill="mediumaquamarine",
pointcolor="#2c7fb8",
densitycolor="#edf8b1", alpha=.4)
#' the histogram. (default=TRUE)
#' @param densitycolor fill color for density curve.
#' @param alpha Alpha transparency (0-1) for the density curve and
#' jittered points.
#' @import ggplot2
#' @import patchwork
#' @return a ggplot2 graph
#' @export
#' @examples
#' univariate_plot(mtcars, mpg)
univariate_plot(cardata, city_mpg, fill="#fbb4ae",
pointcolor="#ccebc5",
densitycolor="#fbb4ae", alpha=.4)
#' the histogram. (default=TRUE)
#' @param densitycolor fill color for density curve.
#' @param alpha Alpha transparency (0-1) for the density curve and
#' jittered points.
#' @import ggplot2
#' @import patchwork
#' @return a ggplot2 graph
#' @export
#' @examples
#' univariate_plot(mtcars, mpg)
univariate_plot(cardata, city_mpg, fill="#fbb4ae",
pointcolor="#ccebc5",
densitycolor="#fbb4ae", alpha=.6)
#' the histogram. (default=TRUE)
#' @param densitycolor fill color for density curve.
#' @param alpha Alpha transparency (0-1) for the density curve and
#' jittered points.
#' @import ggplot2
#' @import patchwork
#' @return a ggplot2 graph
#' @export
#' @examples
#' univariate_plot(mtcars, mpg)
univariate_plot(cardata, city_mpg, fill="#b3cde3",
pointcolor="#ccebc5",
densitycolor="#fbb4ae", alpha=.6)
#' the histogram. (default=TRUE)
#' @param densitycolor fill color for density curve.
#' @param alpha Alpha transparency (0-1) for the density curve and
#' jittered points.
#' @import ggplot2
#' @import patchwork
#' @return a ggplot2 graph
#' @export
#' @examples
#' univariate_plot(mtcars, mpg)
univariate_plot(cardata, city_mpg, fill="#b3cde3",
pointcolor="#ccebc5",
densitycolor="#fbb4ae", alpha=.4)
#' the histogram. (default=TRUE)
#' @param densitycolor fill color for density curve.
#' @param alpha Alpha transparency (0-1) for the density curve and
#' jittered points.
#' @import ggplot2
#' @import patchwork
#' @return a ggplot2 graph
#' @export
#' @examples
#' univariate_plot(mtcars, mpg)
univariate_plot(cardata, city_mpg, fill="#b3cde3",
pointcolor="#b3cde3",
densitycolor="#fbb4ae", alpha=.4)
#' the histogram. (default=TRUE)
#' @param densitycolor fill color for density curve.
#' @param alpha Alpha transparency (0-1) for the density curve and
#' jittered points.
#' @import ggplot2
#' @import patchwork
#' @return a ggplot2 graph
#' @export
#' @examples
#' univariate_plot(mtcars, mpg)
univariate_plot(cardata, city_mpg, fill="#b3cde3",
pointcolor="#b3cde3",
densitycolor="#fbb4ae", alpha=.6)
#' the histogram. (default=TRUE)
#' @param densitycolor fill color for density curve.
#' @param alpha Alpha transparency (0-1) for the density curve and
#' jittered points.
#' @import ggplot2
#' @import patchwork
#' @return a ggplot2 graph
#' @export
#' @examples
#' univariate_plot(mtcars, mpg)
univariate_plot(cardata, city_mpg, fill="#b3cde3",
pointcolor="#b3cde3",
densitycolor="#fbb4ae", alpha=.7)
library(qacr)
build_site()
library(qacr)
build_site()
univariate_plot(cardata, city_mpg)
univariate_plot(cardata, hp)
names(cardata)
univariate_plot(cardata, popularity)
univariate_plot(cardata, popularity, alpha=.01)
univariate_plot(cardata, engine_hp, alpha=.01)
univariate_plot(cardata, engine_hp)
univariate_plot(cardata, engine_hp, alpha=.5)
univariate_plot(cardata, engine_hp, alpha=.1)
univariate_plot(cardata, engine_hp, alpha=.05)
univariate_plot(cardata, engine_hp, alpha=.01)
univariate_plot(cardata, engine_hp, alpha=.05)
univariate_plot(cardata, engine_hp, alpha=.05, fill="steelblue")
univariate_plot(cardata, engine_hp, alpha=.05, fill="red")
univariate_plot(cardata, engine_hp, alpha=.05, fill="red", pointcolor="darkred")
colors()
univariate_plot(cardata, engine_hp, alpha=.05, fill="violetred", pointcolor="darkred")
univariate_plot(cardata, engine_hp, alpha=.05, fill="tomato", pointcolor="darkred")
univariate_plot(cardata, engine_hp, alpha=.05, fill="tomato", pointcolor="red")
univariate_plot(cardata, engine_hp, alpha=.05, fill="tomato", pointcolor="tomato4")
univariate_plot(cardata, engine_hp, alpha=.05, fill="tomato", pointcolor="tomato2")
univariate_plot(cardata, engine_hp, alpha=.05, fill="tomato", pointcolor="tomato3")
univariate_plot(cardata, engine_hp, alpha=.05, fill="tomato", pointcolor="steelblue")
load("big5")
getwd()
load("R/big5")
library(usethis)
use_data(big5)
str(big5)
big5$engnat <- NULL
use_data(big5, overwrite=TRUE)
tab(big5, hand)
library(qacr)
tab(big5, hand)
tab(big5, source)
big5$source <- NULL
names(big5)
library(qacr)
?big5
library(qacr)
?big5
library(qacr)
library(qacr)
library(qacr)
?big5
library(qacr)
library(qacr)
?big5
library(qacr)
library(pkgdown)
build_site()
library(qacr)
rm(big5)
data(big5)
scree_plot(big5)
names(big5)
names(big5)
View(big5)
names(big5)
class(big5)
data(big5)
names(big5)
names(big5)[7:56]
big5 <- recodes(big5, vars=names(big5)[7:56],
from=0, to=NA)
library(qacr)
rm(big5)
data(big5)
big5 <- recodes(big5, vars=names(big5)[7:56],
from=0, to=NA)
contents(big5)
big5$source <- NULL
contents(big5)
names(big5)
attributes(big5)
summary(big5)
big5 <- na.omit(big5)
data(big5)
big5 <- recodes(big5, vars=names(big5)[7:56],
from=0, to=NA)
big5$source <- NULL
library(usethis)
use_data(big5, overwrite=TRUE)
library(qacr)
contents(big5)
data(big5)
names(big5)
v <- big5[6:55]
names(v)
length(v)
scree_plot(v)
v1 <- v[sample(1:nrow(v), 1000),]
scree_plot(v1)
View(v1)
?scree_plot
class(v1)
data(big5)
v <- big5[6:55]
v1 <- v[sample(1:nrow(v), 1000),]
scree_plot(v1)
library(qacr)
scree_plot(v1)
names(v1)
v1 <- v[sample(1:nrow(v), 5000),]
scree_plot(v1, n.iter=50, method="pa")
scree_plot(v1, n.iter=50, method="ml")
scree_plot(v1, n.iter=100, method="pca")
scree_plot(v1, n.iter=100, method="pc")
x <- FA(v, nfactors=5, rotate="varimax")
plot(x)
plot(x, sort=FALSE)
plot(x, sort=FALSE, type="bar")
library(pkgdown)
build_site()
load("RIASEC.rda")
load("R/RIASEC.rda")
View(RIASEC)
library(qacr)
contents(RIASEC)
tab(RIASEC, major, sorted=TRUE, maxcat=50)
?tab
tab(RIASEC, major, sort=TRUE, maxcat=50)
RIASEC$major <- tolower(RIASEC$major)
tab(RIASEC, major, sort=TRUE, maxcat=50)
tab(RIASEC, country, sort=TRUE, maxcat=50)
RIASEC$major <- trimws(RIASEC$major)
tab(RIASEC, major, sort=TRUE, maxcat=50)
df <- RIASEC[RIASEC$major %in% c(
'psychology',
'business',
'english',
'nursing',
'biology',
'education',
'engineering',
'accounting',
'computer science',
'law',
'civil engineering',
'economics',
'history'),
]
contents(df)
df <- df[df$gender %in% c("Male", "Female"),]
tab(df, country, sort=TRUE)
df <- df[df$country == "US", ]
df$orientation <- NULL
contents(df)
df$gender <- factor(df$gender)
str(df$gender)
contents(df)
df$country <- NULL
contents(df, maxcat=50)
df$race <- NULL
df <- df[!(df$religion %in% c("Sihk", "Other")), ]
contents(df)
contents(cars74)
df$major <- factor(df$major)
contents(df, maxcat=50)
df <- df[!(df$religion %in% c("Sikh", "Other")), ]
df$religion <- factor(df$religion)
contents(df, maxcat=50)
names(df)
x <- df[1:48]
scree_plot(x)
x <- FA(x, nfactors=6)
plot(x)
x <- df[1:48]
x <- FA(x, nfactors=6, rotate="varimax")
plot(x)
plot(x, sort=FALSE)
contents(df)
holland <- df
library(usethis)
use_data(holland)
contents(df)
min(df$age)
str(df$age)
names(df)
head(df$age)
class(holland)
dim(holland)
str(holland)
load("R/RIASEC.rda")
load("R/RIASEC.rda")
str(RIASEC)
library(qacr)
contents(holland)
str(holland)
load("R/holland.rda")
library(usethis)
use_data(holland)
use_data(holland, overwrite=TRUE)
library(qacr)
rm(holland)
contents(holland)
?holland
library(qacr)
?holland
library(pkgdown)
build_site()
build_site()
library(qacr)
build_site()
