#print(qvars)
}
# character variables-----------------------------
# identify character variables
cindex <- sapply(data, function(x)is.character(x)|is.factor(x))
if(any(cindex)){
cdata <- data[cindex]
cnames <- names(cdata)
cvars <- data.frame()
# get table
for(i in seq_along(cdata)){
cname <- cnames[i]
x <- table(cdata[[i]])
n <- as.numeric(x)
pct <- as.numeric(n/sum(n))
level <- as.character(dimnames(x)[[1]])
dfc <- data.frame(
variable = cname,
level = level,
n = n,
pct = pct
)
# long labels
dfc$level <- substr(dfc$level, 1, label_length)
# many levels
if (nrow(dfc) > maxcat){
row_final <- data.frame(
variable = cname,
level=paste0("(", nrow(dfc)-maxcat, " more levels)"),
n = sum(dfc$n[(maxcat+1):nrow(dfc)]),
pct = sum(dfc$pct[(maxcat+1):nrow(dfc)])
)
dfc <- dfc[1:maxcat,]
dfc <- rbind(dfc, row_final)
}
cvars <- rbind(cvars, dfc)
cvars$pct <- round(cvars$pct, digits)
cvars$variable[duplicated(cvars$variable)] <- " "
}
results$cvars <- cvars
cat("\n",
crayon::blue$underline$bold('Categorical Variables'),
"\n", sep="")
print(jtools::md_table(cvars, row.names=FALSE,
format="simple", align="llrr",
digits=2, sig.digits=TRUE))
print.data.frame(cvars, right=FALSE, row.names=FALSE)
}
invisible(results)
}
contents(qacData::heart)
contents <- function(data, digits = 2,
maxcat=10, label_length=20){
if(!(is.data.frame(data))){
stop("You need to input a data frame")
}
dataname <- deparse(substitute(data))
cat("\nThe data frame", dataname, "has",
format(nrow(data), big.mark=","), "observations and",
format(ncol(data), big.mark=","), "variables.\n")
results <- list(overall=NULL, qvars=NULL, cvars=NULL)
# overall summary --------------------------
varnames <- colnames(data)
colnames <- c("pos", "variable", "type", "n_unique",
"n_miss", "pct_miss")
pos = seq_along(data)
varname <- colnames(data)
type = sapply(data, function(x)class(x)[1])
n_unique = sapply(data, function(x)length(unique(x)))
n_miss = sapply(data, function(x)sum(is.na(x)))
pct_miss = paste0(round(n_miss/nrow(data), digits) * 100, "%")
#pct_miss = round(n_miss/nrow(data), digits)
overall <- data.frame(
pos, varname, type, n_unique, n_miss, pct_miss
)
results$overall <- overall
cat("\n", crayon::blue$underline$bold('Overall'), "\n", sep="")
print(jtools::md_table(overall, row.names=FALSE,
format="simple", align="lllrrr",
digits=2, sig.digits=TRUE))
#print(overall, row.names=FALSE, right=FALSE)
# numeric variables-----------------------------
# identify numeric variables
nindex <- sapply(data, is.numeric)
if(any(nindex)){
# get statistics
numstats <- function(x){
x = na.omit(x)
n=sum(!is.na((x)))
mean=round(mean(x), digits=digits)
sd=round(sd(x), digits=digits)
skew=round(skewness(x), digits=digits)
min=round(min(x), digits=digits)
p25=round(quantile(x, 0.25)[[1]], digits=digits)
median=round(median(x), digits=digits)
p75=round(quantile(x, 0.75)[[1]], digits=digits)
max=round(max(x), digits=digits)
return(c(n=n, mean=mean, sd=sd, skew=skew,
min=min, p25=p25, median=median,
p75=p75, max=max))
}
qvars <- sapply(data[nindex], numstats)
qvars <- as.data.frame(t(qvars))
qvars$variable <- row.names(qvars)
row.names(qvars) <- NULL
qvars <- qvars[c(10, 1:9)]
results$qvars <- qvars
cat("\n", crayon::blue$underline$bold('Numeric Variables'),
"\n", sep="")
print(jtools::md_table(qvars, row.names=FALSE,
format="simple", align="lrrrrrrrrr",
digits=2, sig.digits=TRUE))
#print(qvars)
}
# character variables-----------------------------
# identify character variables
cindex <- sapply(data, function(x)is.character(x)|is.factor(x))
if(any(cindex)){
cdata <- data[cindex]
cnames <- names(cdata)
cvars <- data.frame()
# get table
for(i in seq_along(cdata)){
cname <- cnames[i]
x <- table(cdata[[i]])
n <- as.numeric(x)
pct <- as.numeric(n/sum(n))
level <- as.character(dimnames(x)[[1]])
dfc <- data.frame(
variable = cname,
level = level,
n = n,
pct = pct
)
# long labels
dfc$level <- substr(dfc$level, 1, label_length)
# many levels
if (nrow(dfc) > maxcat){
row_final <- data.frame(
variable = cname,
level=paste0("(", nrow(dfc)-maxcat, " more levels)"),
n = sum(dfc$n[(maxcat+1):nrow(dfc)]),
pct = sum(dfc$pct[(maxcat+1):nrow(dfc)])
)
dfc <- dfc[1:maxcat,]
dfc <- rbind(dfc, row_final)
}
cvars <- rbind(cvars, dfc)
cvars$pct <- round(cvars$pct, digits)
cvars$variable[duplicated(cvars$variable)] <- " "
}
results$cvars <- cvars
cat("\n",
crayon::blue$underline$bold('Categorical Variables'),
"\n", sep="")
print(jtools::md_table(cvars, row.names=FALSE,
format="simple", align="llrr",
digits=2, sig.digits=TRUE))
print.data.frame(cvars, right=FALSE, row.names=FALSE)
}
invisible(results)
}
contents(qacData::heart)
contents(qacData::heart)
contents <- function(data, digits = 2,
maxcat=10, label_length=20){
if(!(is.data.frame(data))){
stop("You need to input a data frame")
}
dataname <- deparse(substitute(data))
cat("\nThe data frame", dataname, "has",
format(nrow(data), big.mark=","), "observations and",
format(ncol(data), big.mark=","), "variables.\n")
results <- list(overall=NULL, qvars=NULL, cvars=NULL)
# overall summary --------------------------
varnames <- colnames(data)
colnames <- c("pos", "variable", "type", "n_unique",
"n_miss", "pct_miss")
pos = seq_along(data)
varname <- colnames(data)
type = sapply(data, function(x)class(x)[1])
n_unique = sapply(data, function(x)length(unique(x)))
n_miss = sapply(data, function(x)sum(is.na(x)))
pct_miss = paste0(round(n_miss/nrow(data), digits) * 100, "%")
#pct_miss = round(n_miss/nrow(data), digits)
overall <- data.frame(
pos, varname, type, n_unique, n_miss, pct_miss
)
results$overall <- overall
cat("\n", crayon::blue$underline$bold('Overall'), "\n", sep="")
print(jtools::md_table(overall, row.names=FALSE,
format="simple", align="lllrrr",
digits=2, sig.digits=TRUE))
#print(overall, row.names=FALSE, right=FALSE)
# numeric variables-----------------------------
# identify numeric variables
nindex <- sapply(data, is.numeric)
if(any(nindex)){
# get statistics
numstats <- function(x){
x = na.omit(x)
n=sum(!is.na((x)))
mean=round(mean(x), digits=digits)
sd=round(sd(x), digits=digits)
skew=round(skewness(x), digits=digits)
min=round(min(x), digits=digits)
p25=round(quantile(x, 0.25)[[1]], digits=digits)
median=round(median(x), digits=digits)
p75=round(quantile(x, 0.75)[[1]], digits=digits)
max=round(max(x), digits=digits)
return(c(n=n, mean=mean, sd=sd, skew=skew,
min=min, p25=p25, median=median,
p75=p75, max=max))
}
qvars <- sapply(data[nindex], numstats)
qvars <- as.data.frame(t(qvars))
qvars$variable <- row.names(qvars)
row.names(qvars) <- NULL
qvars <- qvars[c(10, 1:9)]
results$qvars <- qvars
cat("\n", crayon::blue$underline$bold('Numeric Variables'),
"\n", sep="")
print(jtools::md_table(qvars, row.names=FALSE,
format="simple", align="lrrrrrrrrr",
digits=2, sig.digits=TRUE))
#print(qvars)
}
# character variables-----------------------------
# identify character variables
cindex <- sapply(data, function(x)is.character(x)|is.factor(x))
if(any(cindex)){
cdata <- data[cindex]
cnames <- names(cdata)
cvars <- data.frame()
# get table
for(i in seq_along(cdata)){
cname <- cnames[i]
x <- table(cdata[[i]])
n <- as.numeric(x)
pct <- as.numeric(n/sum(n))
level <- as.character(dimnames(x)[[1]])
dfc <- data.frame(
variable = cname,
level = level,
n = n,
pct = pct
)
# long labels
dfc$level <- substr(dfc$level, 1, label_length)
# many levels
if (nrow(dfc) > maxcat){
row_final <- data.frame(
variable = cname,
level=paste0("(", nrow(dfc)-maxcat, " more levels)"),
n = sum(dfc$n[(maxcat+1):nrow(dfc)]),
pct = sum(dfc$pct[(maxcat+1):nrow(dfc)])
)
dfc <- dfc[1:maxcat,]
dfc <- rbind(dfc, row_final)
}
cvars <- rbind(cvars, dfc)
cvars$pct <- round(cvars$pct, digits)
cvars$variable[duplicated(cvars$variable)] <- " "
}
results$cvars <- cvars
cat("\n",
crayon::blue$underline$bold('Categorical Variables'),
"\n", sep="")
print(jtools::md_table(cvars, row.names=FALSE,
format="simple", align="llrr",
digits=2, sig.digits=TRUE))
#print.data.frame(cvars, right=FALSE, row.names=FALSE)
}
invisible(results)
}
contents(qacData::heart)
contents(cardata)
contents <- function(data, digits = 2,
maxcat=10, label_length=20){
if(!(is.data.frame(data))){
stop("You need to input a data frame")
}
dataname <- deparse(substitute(data))
cat("\nThe data frame", dataname, "has",
format(nrow(data), big.mark=","), "observations and",
format(ncol(data), big.mark=","), "variables.\n")
results <- list(overall=NULL, qvars=NULL, cvars=NULL)
# overall summary --------------------------
varnames <- colnames(data)
colnames <- c("pos", "variable", "type", "n_unique",
"n_miss", "pct_miss")
pos = seq_along(data)
varname <- colnames(data)
type = sapply(data, function(x)class(x)[1])
n_unique = sapply(data, function(x)length(unique(x)))
n_miss = sapply(data, function(x)sum(is.na(x)))
pct_miss = paste0(round(n_miss/nrow(data), digits) * 100, "%")
#pct_miss = round(n_miss/nrow(data), digits)
overall <- data.frame(
pos, varname, type, n_unique, n_miss, pct_miss
)
results$overall <- overall
cat("\n", crayon::blue$underline$bold('Overall'), "\n", sep="")
print(jtools::md_table(overall, row.names=FALSE,
format="multiline", align="lllrrr",
digits=2, sig.digits=TRUE))
#print(overall, row.names=FALSE, right=FALSE)
# numeric variables-----------------------------
# identify numeric variables
nindex <- sapply(data, is.numeric)
if(any(nindex)){
# get statistics
numstats <- function(x){
x = na.omit(x)
n=sum(!is.na((x)))
mean=round(mean(x), digits=digits)
sd=round(sd(x), digits=digits)
skew=round(skewness(x), digits=digits)
min=round(min(x), digits=digits)
p25=round(quantile(x, 0.25)[[1]], digits=digits)
median=round(median(x), digits=digits)
p75=round(quantile(x, 0.75)[[1]], digits=digits)
max=round(max(x), digits=digits)
return(c(n=n, mean=mean, sd=sd, skew=skew,
min=min, p25=p25, median=median,
p75=p75, max=max))
}
qvars <- sapply(data[nindex], numstats)
qvars <- as.data.frame(t(qvars))
qvars$variable <- row.names(qvars)
row.names(qvars) <- NULL
qvars <- qvars[c(10, 1:9)]
results$qvars <- qvars
cat("\n", crayon::blue$underline$bold('Numeric Variables'),
"\n", sep="")
print(jtools::md_table(qvars, row.names=FALSE,
format="multiline", align="lrrrrrrrrr",
digits=2, sig.digits=TRUE))
#print(qvars)
}
# character variables-----------------------------
# identify character variables
cindex <- sapply(data, function(x)is.character(x)|is.factor(x))
if(any(cindex)){
cdata <- data[cindex]
cnames <- names(cdata)
cvars <- data.frame()
# get table
for(i in seq_along(cdata)){
cname <- cnames[i]
x <- table(cdata[[i]])
n <- as.numeric(x)
pct <- as.numeric(n/sum(n))
level <- as.character(dimnames(x)[[1]])
dfc <- data.frame(
variable = cname,
level = level,
n = n,
pct = pct
)
# long labels
dfc$level <- substr(dfc$level, 1, label_length)
# many levels
if (nrow(dfc) > maxcat){
row_final <- data.frame(
variable = cname,
level=paste0("(", nrow(dfc)-maxcat, " more levels)"),
n = sum(dfc$n[(maxcat+1):nrow(dfc)]),
pct = sum(dfc$pct[(maxcat+1):nrow(dfc)])
)
dfc <- dfc[1:maxcat,]
dfc <- rbind(dfc, row_final)
}
cvars <- rbind(cvars, dfc)
cvars$pct <- round(cvars$pct, digits)
cvars$variable[duplicated(cvars$variable)] <- " "
}
results$cvars <- cvars
cat("\n",
crayon::blue$underline$bold('Categorical Variables'),
"\n", sep="")
print(jtools::md_table(cvars, row.names=FALSE,
format="multiline", align="llrr",
digits=2, sig.digits=TRUE))
#print.data.frame(cvars, right=FALSE, row.names=FALSE)
}
invisible(results)
}
contents(cardata)
library(qacr)
build_site()
x <- contents(cardata)
x <- contents(cardata)
library(huxtable)
x$qvars
y <- hux(x$qvars)
y
y
screen_print(y)
print_screen(y)
contents(qacData::heart)
library(qacr)
contents(qacData::heart)
dfPlot(qacr::heart)
dfPlot(qacData::heart)
barcharts(qacData::heart)
histograms(qacData::heart)
crosstab(qacData::heart, cp, disease)
crosstab(qacData::heart, cp, disease, type="rowpercent", plot=TRUE)
crosstab(qacData::heart, cp, sex, type="rowpercent", plot=TRUE)
crosstab(qacData::heart, cp, sex, type="rowpercent", plot=TRUE, chisquare=TRUE)
crosstab(qacData::heart, cp, disease, type="rowpercent", plot=TRUE, chisquare=TRUE)
crosstab(qacData::heart, cp, disease, type="colpercent", plot=TRUE, chisquare=TRUE)
crosstab(qacData::heart, cp, sex, type="colpercent", plot=TRUE, chisquare=TRUE)
scatter(qacData::countries, Exports, Imports)
# add linear, quadratic fits with equations and rsq
# add subset (with dplyr)
scatter <- function(data, x, y, outlier=3, alpha=1,
method = "lm",
margin="none",
point_color="deepskyblue2",
outlier_color="violetred1",
line_color="grey30",
margin_color="deepskyblue2",
title){
require(ggplot2)
require(ggExtra)
# import parameters
x <- as.character(substitute(x))
y <- as.character(substitute(y))
f <- as.formula(paste(y, "~", x))
# title
if(missing(title)){
title <- paste("Plot of", x, "by", y)
}
# remove missing data
data <- na.omit(data[c(x, y)])
# fit model and flag outliers
fit  <- lm(f, data)
sfit <- summary(fit)
b0   <- coefficients(fit)[1]
b1   <- coefficients(fit)[2]
Fvalue <- sfit$fstatistic[1]
dfn  <- sfit$fstatistic[2]
dfd  <- sfit$fstatistic[3]
r    <- sqrt(sfit$r.squared)
p    <- pf(Fvalue, dfn, dfd, lower.tail = FALSE)
# studentized residuals
data$stud.residuals <- rstudent(fit)
# rmse
rmse <- sqrt(mean(residuals(fit)^2))
# flag outliers
data$outlier <- ifelse(abs(data$stud.residuals) >= outlier,
"outlier", "non-outlier")
# create informational inset
inset <- paste0(
# equation
y,
" = ",
round(b0, 2),
" + ",
round(b1, 2),
" * ",
x,
# F test
", F(",
dfn,
", " ,
dfd,
") = ",
round(Fvalue, 2),
", p = ",
round(p, 3),
# rmse and r
", rmse = ",
round(rmse, 2),
", r = ",
round(r, 3)
)
# create plot
p <- ggplot(data=data,
aes(x=.data[[x]],
y=.data[[y]])) +
geom_point(alpha=alpha,
aes(color=.data[["outlier"]])) +
geom_smooth(method=method,
formula=y~x,
color=line_color) +
scale_color_manual(values=c(point_color, outlier_color)) +
labs(title = title,
subtitle = inset) +
theme_bw() +
theme(legend.position="none",
plot.subtitle = element_text(size=8,face="plain"),
plot.caption = element_text(size=8, face="plain"))
# outlier caption
if (any(abs(data$stud.residuals) > outlier)){
p <- p + labs(caption=paste("Note: studentized residuals >",
outlier, "are highlighted."))
}
# add margins
if(margin!="none"){
p <- ggExtra::ggMarginal(p, size=8, type=margin,
fill=margin_color)
}
# return graph
p
}
scatter(qacData::countries, Exports, Imports)
scatter(qacData::countries, Inflation.rate.consumer.prices, Unemployment.rate)
scatter(qacData::countries[countries$Inflation.rate.consumer.prices<300,], Inflation.rate.consumer.prices, Unemployment.rate)
scatter(qacData::countries[qacData::countries$Inflation.rate.consumer.prices<300,], Inflation.rate.consumer.prices, Unemployment.rate)
