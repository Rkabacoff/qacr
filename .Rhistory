geom_boxplot(aes_string(fill = x)) +
geom_text(data = plot.levels,
aes(x = plot.labels,
y = y,
label = Letters)) +
theme_minimal() +
theme( plot.subtitle = element_text(size = 9),
plot.caption = element_text(size=8),
legend.position="none") +
labs(title = "Group Differences",
subtitle = paste("Kruskal-Wallis:", fit.result),
caption = "Boxplots that share letters are not significantly different (Conner Test p < 0.05).\nDashed line is the median value for all obs.")
plot(p)
}
# return results
result <- list(result = fit.result, summarystats = mystats)
return(result)
}
groupdiff(popularity~vehicle_style, cardata, offset=500)
#' }
#' In each case, a boxplot and summary statistics are provided.
#' @seealso \link[PMCMRplus]{kwAllPairsConoverTest},
#' \link[multcompView]{multcompLetters}.
#' @examples
#' # parametric analysis
#' groupdiff(hp ~ gear, mtcars)
#'
#' # nonparametric analysis
#' groupdiff(hp ~ gear, mtcars, method="kw")
groupdiff <- function(formula, data,
method=c("anova", "kw"),
digits=2,
offset = 5){
x <- as.character(formula[[3]])
y <- as.character(formula[[2]])
data <- na.omit(data[c(x, y)])
data[x] <- factor(data[[x]])
data[x] <- reorder(data[[x]], data[[y]], mean, na.rm=TRUE)
levels(data[[x]]) <- gsub("-", " ", levels(data[[x]]))
# plot colors
#colors <- brewer.pal(nlevels(data[[x]]), "Set3")
method <- match.arg(method)
if(method == "anova"){
# omnibus
a <- aov(formula, data)
fit <- unlist(summary(a))
F <- round(fit[7], digits)
df1 <- fit[1]
df2 <- fit[2]
p   <- fit[9]
fit.result <- paste0("F(", df1, ", ", df2, ") = ", F,
", p-value = ", format.pval(p, digits))
# summary statistics
mystats <-  data %>%
group_by(.data[[x]]) %>%
summarise(n = n(),
mean = round(mean(.data[[y]], na.rm=TRUE), digits),
sd = round(sd(.data[[y]], na.rm=TRUE), digits),
.groups = 'drop') %>%
as.data.frame()
# posthoc comparisons
tHSD <- TukeyHSD(a, ordered = FALSE, conf.level = 0.95)
Tukey.levels <- tHSD[[1]][,4]
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
plot.labels <- names(Tukey.labels[['Letters']])
plot.levels <- data.frame(plot.labels, Tukey.labels,
stringsAsFactors = FALSE,
row.names=NULL)
plot.levels$y <- max(data[y], na.rm=TRUE) + offset
# plot
p <- ggplot(data, aes_string(x=x, y=y)) +
geom_hline(yintercept=mean(data[[y]], na.rm=TRUE),
linetype="dashed",
color="darkgrey") +
geom_boxplot(aes_string(fill=x)) +
geom_point(data=mystats,
mapping=aes_string(x=x, y="mean"),
size=1, shape=3) +
geom_text(data = plot.levels,
aes(x = plot.labels,
y = y,
label = Letters)) +
theme_minimal() +
theme( plot.subtitle = element_text(size = 9),
plot.caption = element_text(size=8),
legend.position="none") +
labs(title = "Group Differences",
subtitle = paste("ANOVA:", fit.result),
caption = "Boxplots that share letters are not significantly different (TukeyHSD p < 0.05).\nCrosses are group means. Dashed line is the mean value for all obs.")
plot(p + coord_flip())
}
if(method == "kw"){
# omnibus
fit <- kruskal.test(formula, data)
fit.result <- paste("Chi-squared = ",
round(fit$statistic, digits),
", df =",
fit$parameter,
", p-value =",
format.pval(fit$p.value, digits))
# summary statistics
mystats <-  data %>%
group_by(.data[[x]]) %>%
summarise(n = n(),
median = round(median(.data[[y]], na.rm=TRUE), digits),
mad = round(mad(.data[[y]], na.rm=TRUE), digits),
.groups = 'drop') %>%
as.data.frame()
# posthoc
phtest <- kwAllPairsConoverTest(formula, data)
n <- ncol(phtest$p.value)
w <- matrix(nrow=n+1, ncol=n+1)
nms <- c(dimnames(phtest$p.value)[[2]], dimnames(phtest$p.value)[[1]][n])
dimnames(w) <- list(nms, nms)
w[2:nrow(w), 1:n] <- phtest$p.value
makeSymm <- function(m) {
m[upper.tri(m)] <- t(m)[upper.tri(m)]
return(m)
}
w <- makeSymm(w)
plot.levels <- data.frame(
plot.labels = rownames(w),
Letters = as.list(multcompLetters(w))$Letters,
y = max(data[y], na.rm=TRUE) + offset
)
# plot
p <- ggplot(data, aes_string(x=x, y=y)) +
geom_hline(yintercept=median(data[[y]], na.rm=TRUE),
linetype="dashed",
color="darkgrey") +
geom_boxplot(aes_string(fill = x)) +
geom_text(data = plot.levels,
aes(x = plot.labels,
y = y,
label = Letters)) +
theme_minimal() +
theme( plot.subtitle = element_text(size = 9),
plot.caption = element_text(size=8),
legend.position="none") +
labs(title = "Group Differences",
subtitle = paste("Kruskal-Wallis:", fit.result),
caption = "Boxplots that share letters are not significantly different (Conner Test p < 0.05).\nDashed line is the median value for all obs.")
plot(p)
}
# return results
result <- list(result = fit.result, summarystats = mystats)
return(result)
}
groupdiff(popularity~vehicle_style, cardata, offset=500)
#' In each case, a boxplot and summary statistics are provided.
#' @seealso \link[PMCMRplus]{kwAllPairsConoverTest},
#' \link[multcompView]{multcompLetters}.
#' @examples
#' # parametric analysis
#' groupdiff(hp ~ gear, mtcars)
#'
#' # nonparametric analysis
#' groupdiff(popularity ~ vehicle_style, cardata, method="kw",
#'           offset=500, horizontal=TRUE)
groupdiff <- function(formula, data,
method=c("anova", "kw"),
digits=2,
offset = 5,
horizontal=FALSE){
x <- as.character(formula[[3]])
y <- as.character(formula[[2]])
data <- na.omit(data[c(x, y)])
data[x] <- factor(data[[x]])
data[x] <- reorder(data[[x]], data[[y]], mean, na.rm=TRUE)
levels(data[[x]]) <- gsub("-", " ", levels(data[[x]]))
# plot colors
#colors <- brewer.pal(nlevels(data[[x]]), "Set3")
method <- match.arg(method)
if(method == "anova"){
# omnibus
a <- aov(formula, data)
fit <- unlist(summary(a))
F <- round(fit[7], digits)
df1 <- fit[1]
df2 <- fit[2]
p   <- fit[9]
fit.result <- paste0("F(", df1, ", ", df2, ") = ", F,
", p-value = ", format.pval(p, digits))
# summary statistics
mystats <-  data %>%
group_by(.data[[x]]) %>%
summarise(n = n(),
mean = round(mean(.data[[y]], na.rm=TRUE), digits),
sd = round(sd(.data[[y]], na.rm=TRUE), digits),
.groups = 'drop') %>%
as.data.frame()
# posthoc comparisons
tHSD <- TukeyHSD(a, ordered = FALSE, conf.level = 0.95)
Tukey.levels <- tHSD[[1]][,4]
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
plot.labels <- names(Tukey.labels[['Letters']])
plot.levels <- data.frame(plot.labels, Tukey.labels,
stringsAsFactors = FALSE,
row.names=NULL)
plot.levels$y <- max(data[y], na.rm=TRUE) + offset
# plot
p <- ggplot(data, aes_string(x=x, y=y)) +
geom_hline(yintercept=mean(data[[y]], na.rm=TRUE),
linetype="dashed",
color="darkgrey") +
geom_boxplot(aes_string(fill=x)) +
geom_point(data=mystats,
mapping=aes_string(x=x, y="mean"),
size=1, shape=3) +
geom_text(data = plot.levels,
aes(x = plot.labels,
y = y,
label = Letters)) +
theme_minimal() +
theme( plot.subtitle = element_text(size = 9),
plot.caption = element_text(size=8),
legend.position="none") +
labs(title = "Group Differences",
subtitle = paste("ANOVA:", fit.result),
caption = "Boxplots that share letters are not significantly different (TukeyHSD p < 0.05).\nCrosses are group means. Dashed line is the mean value for all obs.")
if(horizontal) p <- p + coord_flip()
plot(p)
}
if(method == "kw"){
# omnibus
fit <- kruskal.test(formula, data)
fit.result <- paste("Chi-squared = ",
round(fit$statistic, digits),
", df =",
fit$parameter,
", p-value =",
format.pval(fit$p.value, digits))
# summary statistics
mystats <-  data %>%
group_by(.data[[x]]) %>%
summarise(n = n(),
median = round(median(.data[[y]], na.rm=TRUE), digits),
mad = round(mad(.data[[y]], na.rm=TRUE), digits),
.groups = 'drop') %>%
as.data.frame()
# posthoc
phtest <- kwAllPairsConoverTest(formula, data)
n <- ncol(phtest$p.value)
w <- matrix(nrow=n+1, ncol=n+1)
nms <- c(dimnames(phtest$p.value)[[2]], dimnames(phtest$p.value)[[1]][n])
dimnames(w) <- list(nms, nms)
w[2:nrow(w), 1:n] <- phtest$p.value
makeSymm <- function(m) {
m[upper.tri(m)] <- t(m)[upper.tri(m)]
return(m)
}
w <- makeSymm(w)
plot.levels <- data.frame(
plot.labels = rownames(w),
Letters = as.list(multcompLetters(w))$Letters,
y = max(data[y], na.rm=TRUE) + offset
)
# plot
p <- ggplot(data, aes_string(x=x, y=y)) +
geom_hline(yintercept=median(data[[y]], na.rm=TRUE),
linetype="dashed",
color="darkgrey") +
geom_boxplot(aes_string(fill = x)) +
geom_text(data = plot.levels,
aes(x = plot.labels,
y = y,
label = Letters)) +
theme_minimal() +
theme( plot.subtitle = element_text(size = 9),
plot.caption = element_text(size=8),
legend.position="none") +
labs(title = "Group Differences",
subtitle = paste("Kruskal-Wallis:", fit.result),
caption = "Boxplots that share letters are not significantly different (Conner Test p < 0.05).\nDashed line is the median value for all obs.")
if(horizontal) p <- p + coord_flip()
plot(p)
}
# return results
result <- list(result = fit.result, summarystats = mystats)
return(result)
}
groupdiff(popularity ~ vehicle_style, cardata, method="kw",offset=500, horizontal=TRUE)
library(qacr)
library(pkgdown)
build_site()
build_site()
library(qacr)
build_site()
build_site()
library(qacr)
groupdiff(mpg ~ gear, mtcars)
debug(groupdiff)
groupdiff(mpg ~ gear, mtcars)
data[[y]]
library(qacr)
groupdiff(mpg ~ gear, mtcars)
example(groupdiff)
library(qacr)
example(groupdiff)
library(qacr)
example(groupdiff)
library(qacr)
example(groupdiff)
library(qacr)
example(groupdiff)
library(qacr)
groupdiff(hp ~ gear, mtcars)
groupdiff(hp ~ gear, mtcars, posthoc=FALSE)
groupdiff(popularity ~ vehicl_style, cardata, method="kw")
groupdiff(popularity ~ vehicle_style, cardata, method="kw")
groupdiff(popularity ~ vehicle_style, cardata, method="kw", horizontal=TRUE)
?lm
library(qacr)
library(pkgdown)
build_site()
library(qacr)
library(qacr)
build_site()
library(qacr)
library(pkgdown)
build_site()
library(qacr)
build_site()
?colors
length(colors(distinct=TRUE))
library(qacr)
rcolors()
x <- rcolors()
rcolors("blue")
rcolors("red")
rcolors("gold")
?rcolors
library(qacr)
?rcolors
library(qacr)
library(qacr)
library(qacr)
?rcolors
library(qacr)
?rcolors
library(pkgdown)
build_site()
rcolors("brown")
rcolors("yellow")
rcolors("pink")
rcolors("magenta")
rcolors("dark")
rcolors("light")
library(qacr)
build_site()
library(qacr)
?clear
library(qacr)
clear()
build_site()
library(pkgdown)
library(qacr)
build_site()
library(qacr)
library(qacr)
library(qacr)
build_site()
library(qacr)
build_site()
#' @param n if \code{head=TRUE}, number of rows should be displayed?
#' @export
#' @return a data.frame with four columns (Type, Size, Rows, Columns) and object names as row names.
#' @author
#' Based on based on postings by Petr Pikal and David Hinds to the r-help list in 2004 and
#' modified Dirk Eddelbuettel, Patrick McCann, and Rob Kabacoff.
#' @references \url{http://stackoverflow.com/questions/1189759/expert-r-users-whats-in-your-rprofile}.
#' @examples
#' lso()
#' lso(order.by="Type", head=FALSE)
lso <- function (pos = 1, pattern, order.by = "Size",
decreasing=TRUE, head=TRUE, n = 10) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
if (length(names) > 0) {
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.size <- napply(names, object.size) / 10^6 # megabytes
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.dim)
names(out) <- c("Type", "Size", "Rows", "Columns")
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
} else {
cat("No objects found.\n")
}
}
lso()
data(mtcars)
lso()
x <- 1:10000000
lso()
library(qacr)
?lso
data(carplay)
library(qacr)
data(cardata)
lso()
rm(x)
lso()
library(qacr)
lso()
rm(lso)
lso()
library(qacr)
lso()
library(qacr)
lso()
library(qacr)
lso()
debug(lso)
lso()
out
order.by
order(out[[order.by]])
out[[order.by]]
out
library(qacr)
lso()
library(qacr)
lso()
x <- list(cardata, mtcars)
lso()
build_site()
library(qacr)
newmean <- mean
lso()
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
#' @param pattern pattern to match in listing objects from the package.
#' @export
#' @return a vector containing the object names.
#' @author
#' Based on based on postings by Stephen Turner and
#' modified by Rob Kabacoff.
#' @references \url{http://gettinggeneticsdone.blogspot.com.es/2013/07/customize-rprofile.html}.
#' @examples
#' lsp(car)
#' lsp(car, pattern="wh")
lsp <- function(package=mrgr, all.names = FALSE, pattern){
package <- deparse(substitute(package))
require(package, character.only=TRUE)
ls(pos = paste("package", package, sep = ":"), all.names = all.names,
pattern = pattern)
}
library(caret)
lsp(caret)
phelp(caret)
lsp(caret, "tree")
lsp(qacr)
lsp(caret, pattern="tree")
library(qacr)
build_site()
gplots::col2hex
?col2rgb
?colMat
library(qacr)
?rgb
library(qacr)
library(pkgdown)
build_site()
library(qacr)
library(pkgdown)
build_site()
build_site()
build_site()
library(tidyverse)
library(qacr)
## import data
df <- import("ITHelpDesk.csv")
glimpse(df)
## recode data
df <- mutate(df,
ticket = factor(ticket),
requestor = factor(requestor),
RequestorSeniority = factor(RequestorSeniority,
levels = c(1, 2, 3, 4),
labels = c("Junior", "Regular", "Senior", "Management"),
ordered = TRUE),
FiledAgainst = factor(FiledAgainst),
ITOwner = factor(ITOwner),
TicketType = factor(TicketType,
levels = c(1, 2),
labels = c("Issue", "Request")),
Severity = factor(Severity,
levels = c(1, 2, 3, 4),
labels = c("Minor", "Normal", "Major", "Critical"),
ordered = TRUE),
Priority = factor(Priority,
levels = c(1, 2, 3),
labels = c("Low", "Medium", "High"),
ordered = TRUE),
Satisfaction = factor(Satisfaction,
levels = c(1, 2, 3),
labels = c("Unsatisfied", "Satisfied", "Highly Satisfied"),
ordered = TRUE))
## import data
df <- import("ITHelpDesk.csv")
