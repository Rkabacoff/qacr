# abbreviate level labels
for(i in seq_along(cdata2)){
levels(cdata2[[i]]) <- abbreviate(levels(cdata2[[i]]),
minlength=abbrev)
}
cdata_long <- suppressWarnings(tidyr::gather(cdata2))
require(dplyr)
cdatl_a <- cdata_long %>%
group_by(key, value) %>%
summarize(n=n(), .groups="drop")
cdatl_b <- cdatl_a %>%
group_by(key) %>%
summarize(tot = sum(n), .groups="drop")
cdata_long <- inner_join(cdatl_a, cdatl_b, by="key") %>%
mutate(pct = (n/ tot)*100,
pctlabel = paste0(round(pct), "%"))
require(ggplot2)
require(scales)
p <- ggplot(data=cdata_long, aes(x=value, y=pct)) +
geom_bar(fill=fill, stat="identity") +
labs(x="Value", y="Percent", title="Bar charts") +
scale_y_continuous(breaks=pretty_breaks()) +
facet_wrap(~key, scale="free") +
theme_bw() + coord_flip()  +
theme(panel.grid.major.y=element_blank())
if(labels)
p <- p + geom_text(aes(label = pctlabel), hjust=1, size=3, color=color)
return(p)
}
barcharts(coffee)
histograms(coffee)
library(qacr)
library(pkgbuild)
build_site()
library(pkgbuild)
?pkgbuild_process
library(pkgdown)
build_site()
library(qacr)
library(pkgdown)
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
tbl <- crosstab(cars74, cyl, gear, type = "colpercent")
plot(tbl, size=5)
plot(tbl, size=4)
plot(tbl, size=3)
plot(tbl, size=4)
tbl <- crosstab(cars74, cyl, gear, type = "freq")
plot(tbl, size=4)
library(qacr)
library(qacr)
build_site()
build_site()
library(qacr)
build_site()
build_site()
build_site()
build_site()
build_site()
?cardata
crosstab(cardata, driven_wheels, vehicle_size)
crosstab(cardata, driven_wheels, vehicle_size, plot=TRUE)
crosstab(cardata, vehicle_size, driven_wheels, plot=TRUE)
crosstab(cardata, vehicle_size, driven_wheels, type="colpercent", plot=TRUE)
crosstab(cardata, vehicle_size, driven_wheels, type="rowpercent", plot=TRUE)
crosstab(cardata, driven_wheels, vehicle_size, type="rowpercent", plot=TRUE)
build_site()
crosstab(cardata, transmission_type, driven_wheels, type="rowpercent", plot=TRUE)
build_site()
build_site()
df_summary(cardata)
crosstab(cardata, transmission_type, year, type="rowpercent", plot=TRUE)
build_site()
build_site()
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
crosstab(contraception, wife_education, husband_education)
library(qacData)
crosstab(contraception, wife_education, husband_education)
crosstab(contraception, wife_education, husband_education, plot=TRUE)
crosstab(contraception, wife_education, husband_education, type="colpercent", plot=TRUE)
crosstab(contraception, contraceptive, wife_education, type="colpercent", plot=TRUE)
crosstab(contraception, contraceptive, wife_religion, type="colpercent", plot=TRUE)
crosstab(contraception, contraceptive, standard_of_living, type="colpercent", plot=TRUE)
scatter(contraception, wife_age, number_of_children_ever_born)
library(qacr)
?crosstab
library(qacr)
?crosstab
?switch
library(qacr)
?crosstab
library(qacr)
?crosstab
library(qacr)
?crosstab
library(qacr)
?crosstab
library(qacr)
?crosstab
library(qacr)
?crosstab
?ggplot
library(qacr)
library(qacr)
library(pkgdown)
build_site()
build_site()
library(pkgdown)
build_site()
?crosstab
library(qacr)
?crosstab
library(qacr)
build_site()
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
?tab
#' distribution for a categorical variable and output a data frame
#' with three columns: level, n, percent.
#' @examples
#' tab(venues, state, sort = TRUE, na.rm = TRUE,
#'     maxcat = 10, digits = 3)
#'
#' tab(cars74, carb, cum=TRUE, plot=TRUE)
#' @rdname tab
#' @export
#'
tab <- function(data, x, sort = FALSE, maxcat = NULL, minp = NULL,
na.rm = FALSE, total = FALSE, digits = 2,
cum = FALSE, plot=FALSE) {
if (na.rm) {
data = na.omit(data)
}
vname <- as.character(substitute(x))
x = data[vname][[1]]
if (!is.null(maxcat) & !is.null(minp)){
stop("Only maxcat or minp should be specified, not both.")
}
if (!is.factor(x)) {
x = as.factor(x)
}
t = table(x, useNA = "ifany")
ns <- as.vector(t)
cats = names(t)
props = as.vector(t / sum(t))
df = data.frame(level = cats, n = ns, percent = props)
na_row = as.numeric(row.names(df)[is.na(cats)])
if (!na.rm & length(na_row) != 0) {
prop_na = df$percent[na_row]
na_n = df$n[na_row]
df = df[-na_row, ]
cats = df$level
props = df$percent
ns = df$n
}
if (sort) {
df = data.frame(level = cats, n = ns, percent = props)
df = df[order(-df$n),]
cats = df$level
props = df$percent
ns = df$n
}
if (!is.null(maxcat)) {
df = data.frame(level = cats, n = ns, percent = props)
df = df[order(df$n, decreasing = T),]
cats = df$level
props = df$percent
ns = df$n
if (length(cats) > maxcat) {
n_other = sum(ns[(maxcat + 1):length(cats)])
prop_other = sum(props[(maxcat+1):length(cats)])
cats = cats[1:maxcat]
levels(cats) = c(levels(cats), "Other")
cats[length(cats) + 1] = "Other"
props = props[1:maxcat]
props[length(props) + 1] = prop_other
ns = ns[1:maxcat]
ns[length(ns) + 1] = n_other
}
}
if (!is.null(minp)) {
if (minp > 1 & minp < 100){
minp <- minp/100
warning("minp argument should be less than one. Converting to proportion")
}
if (minp > 100){
stop("minp should be less than one. Argument is too large")
}
t_df = data.frame(level = cats, n = ns, percent = props)
n_other = 0
prop_other = 0
times = sum(t_df[["percent"]] > minp)
df = data.frame(level = as.factor(rep(NA, times = times)), n = rep(NA, times = times), percent = rep(NA, times = times))
cats = as.factor(cats)
levels(df$level) = levels(cats)
place = 1
for (i in 1:nrow(t_df)) {
x = t_df$percent[i]
if ( x < minp){
n_other = n_other + t_df[["n"]][i]
prop_other = prop_other + t_df[["percent"]][i]
} else {
df[place, ] = t_df[i, ]
place = place + 1
}
}
cats = df$level
props = df$percent
ns = df$n
levels(cats) = c(levels(cats), "Other")
cats[length(cats) + 1] = "Other"
props[length(props) + 1] = prop_other
ns[length(ns) + 1] = n_other
}
if (!na.rm & length(na_row) != 0){
levels(cats) = c(levels(cats), NA)
cats[length(cats) + 1] = NA
props[length(props) + 1] = prop_na
ns[length(ns) + 1] = na_n
}
if (total & !cum) {
levels(cats) = c(levels(cats), "Total")
cats[length(cats) + 1] = "Total"
props[length(props) + 1] = sum(props)
ns[length(ns) + 1] = sum(ns)
}
df <- data.frame(level = cats, n = ns,
percent = props*100)
if (cum){
df$cum_n <- cumsum(df$n)
df$cum_percent <- cumsum(df$percent)
}
class(df) <- c("tab", "data.frame")
attr(df, "vname") <- vname
attr(df, "digits") <- digits
if (plot){
x <- plot(df)
if (cum){
subtitle <- paste("cumulative bar chart")
} else {
subtitle <- paste("bar chart")
}
x <- x + labs(title=vname, subtitle=subtitle)
print(x)
} else {
return(df)
}
}
tab(cars74, carb, cum=TRUE, plot=TRUE)
library(ggplot2)
tab(cars74, carb, cum=TRUE, plot=TRUE)
tab(cars74, carb, cum=TRUE, sort=TRUE, plot=TRUE)
tab(cars74, carb, cum=TRUE, sort=TRUE)
library(qacr)
build_site()
build_site()
names(cardata)
df_summary(cardata)
tab(cardata, make)
?cardata
build_site()
build_site()
build_site()
build_site()
tab(cardata, year)
tab(cardata, year, cum=TRUE, plot=TRUE)
tab(cardata, engine_fuel_type, cum=TRUE, plot=TRUE)
tab(cardata, vehicle_style, cum=TRUE, plot=TRUE)
tab(cardata, vehicle_style, sort=TRUE, cum=TRUE, plot=TRUE)
tab(cardata, vehicle_style, sort=TRUE, plot=TRUE)
tab(cardata, vehicle_style, sort=TRUE, cum=TRUE, plot=TRUE)
build_site()
library(qacr)
build_site()
build_site()
build_site()
tab(mtcars, carb)
tab(mtcars, carb, plot=TRUE)
tab(mtcars, carb, plot=TRUE, cum=TRUE)
tab(cars74, carb, plot=TRUE, cum=TRUE)
df_summary <- function(df, digits = 2, maxcat=10, label_length=40){
if(!(is.data.frame(df))){
stop("You need to input a data frame")
}
dfname <- deparse(substitute(df))
class(df) <- "data.frame"  # converts tibbles to data frame
cat("\nThe data frame", dfname, "has", format(nrow(df), big.mark=","),
"observations and", format(ncol(df), big.mark=","), "variables.\n\n")
general_summary <- function(df, digits=digits){
varnames <- colnames(df)
tbl <- matrix( nrow = length(varnames), ncol = 6, byrow = TRUE)
colnames(tbl) <- c("pos", "variable", "type", "n_unique", "n_missing", "pct_missing")
rownames(tbl) <- varnames
tbl[ ,1 ] <- c(1 : length(varnames))
tbl[ , 2] <- varnames
for(i in 1:length(varnames)){
tbl[i,3] <- class(df[,i])[1]
}
for(i in 1:length(varnames)){
tbl[i,4] <- length(unique(df[,i]))
}
for(i in 1:length(varnames)){
tbl[i,5] <- sum(is.na(df[,i]))
}
n <- nrow(df)
for(i in 1:length(varnames)){
tbl[i,6] <- paste0(round(sum(is.na(df[,i]))*100/n, digits=digits) , "%")
}
cat("\n", blue$underline$bold('Overall'), "\n")
prmatrix(tbl, quote=FALSE, rowlab=rep("", nrow(tbl)), right=TRUE)
}
variable_summary<-function(data, digits=digits){
cdf<-data.frame()
ndf<-data.frame()
for (k in names(data)) {
numeric<-c()
categorical<-c()
if(is.numeric(data[[k]])|is.integer(data[[k]])){
numeric<-append(numeric, k)
table1<-data%>%
select(numeric)
for (i in 1:length(table1)){
x<-unlist(table1[,i])
x<-na.omit(x)
table_n<-table1%>%
select(numeric[i])%>%
na.omit()%>%
summarise(name=numeric[i], n=sum(!is.na((x))),
mean=round(mean(x), digits=digits),
sd=round(sd(x), digits=digits),
skew=round(e1071::skewness(x), digits=digits),
min=round(min(x), digits=digits),
p25=round(quantile(x, 0.25), digits=digits),
median=round(median(x), digits=digits),
p75=round(quantile(x, 0.75), digits=digits),
max=round(max(x), digits=digits))%>%
mutate(outliers=sum((x>p75+(1.5*(p75-p25)))|
x<p25-(1.5*(p75-p25))))
ndf<-rbind(ndf, table_n)
}
}
if(is.character(data[[k]])|is.factor(data[[k]])){
categorical<-append(categorical, k)
table2<-data%>%
select(categorical)
for (i in 1:length(table2)){
x<-unlist(table2[,i])
table_c<-table2%>%
na.omit()%>%
group_by(.dots=categorical[i])%>%
summarise(variable=categorical[i], n=n())%>%
mutate(pct=round(n/sum(n), digits=digits))
colnames(table_c)<-c("level","variable",'n', 'pct')
table_c<- table_c[c("variable", "level", "n", 'pct')]
# long labels
table_c$level <- substr(table_c$level, 1, label_length)
# many levels
if (nrow(table_c)>maxcat){
table_c$level<-as.character(table_c$level)
row_final<-c(variable=categorical[i], level="<...>",
n=sum(table_c$n[(maxcat+1):nrow(table_c)]),
pct=sum(table_c$pct[(maxcat+1):nrow(table_c)]))
table_c = table_c[1:maxcat,]
table_c= rbind(table_c, row_final)
cdf<-rbind(cdf, table_c)}
else{
cdf<-rbind(cdf, table_c)
}
cdf$variable[duplicated(cdf$variable)] <- " "
}
}
}
if (nrow(ndf)>0){
cat("\nQuantitative Variables\n",
"======================\n", sep="")
print (data.frame(ndf), row.names=FALSE)
}
if (nrow(cdf)>0){
cat("\nCategorical Variables\n",
"=====================\n", sep="")
print (data.frame(cdf), row.names=FALSE, right=FALSE)
}
}
general_summary(df, digits)
variable_summary(df, digits)
invisible(df)
}
df_summary(cars74)
library(crayon)
df_summary(cars74)
library(dplyr)
df_summary(cars74)
df_summary <- function(df, digits = 2, maxcat=10, label_length=40){
if(!(is.data.frame(df))){
stop("You need to input a data frame")
}
dfname <- deparse(substitute(df))
class(df) <- "data.frame"  # converts tibbles to data frame
cat("\nThe data frame", dfname, "has", format(nrow(df), big.mark=","),
"observations and", format(ncol(df), big.mark=","), "variables.\n\n")
general_summary <- function(df, digits=digits){
varnames <- colnames(df)
tbl <- matrix( nrow = length(varnames), ncol = 6, byrow = TRUE)
colnames(tbl) <- c("pos", "variable", "type", "n_unique", "n_missing", "pct_missing")
rownames(tbl) <- varnames
tbl[ ,1 ] <- c(1 : length(varnames))
tbl[ , 2] <- varnames
for(i in 1:length(varnames)){
tbl[i,3] <- class(df[,i])[1]
}
for(i in 1:length(varnames)){
tbl[i,4] <- length(unique(df[,i]))
}
for(i in 1:length(varnames)){
tbl[i,5] <- sum(is.na(df[,i]))
}
n <- nrow(df)
for(i in 1:length(varnames)){
tbl[i,6] <- paste0(round(sum(is.na(df[,i]))*100/n, digits=digits) , "%")
}
cat("\nOverall\n",
"=======\n", sep="")
prmatrix(tbl, quote=FALSE, rowlab=rep("", nrow(tbl)), right=TRUE)
}
variable_summary<-function(data, digits=digits){
cdf<-data.frame()
ndf<-data.frame()
for (k in names(data)) {
numeric<-c()
categorical<-c()
if(is.numeric(data[[k]])|is.integer(data[[k]])){
numeric<-append(numeric, k)
table1<-data%>%
select(numeric)
for (i in 1:length(table1)){
x<-unlist(table1[,i])
x<-na.omit(x)
table_n<-table1%>%
select(numeric[i])%>%
na.omit()%>%
summarise(name=numeric[i], n=sum(!is.na((x))),
mean=round(mean(x), digits=digits),
sd=round(sd(x), digits=digits),
skew=round(e1071::skewness(x), digits=digits),
min=round(min(x), digits=digits),
p25=round(quantile(x, 0.25), digits=digits),
median=round(median(x), digits=digits),
p75=round(quantile(x, 0.75), digits=digits),
max=round(max(x), digits=digits))%>%
mutate(outliers=sum((x>p75+(1.5*(p75-p25)))|
x<p25-(1.5*(p75-p25))))
ndf<-rbind(ndf, table_n)
}
}
if(is.character(data[[k]])|is.factor(data[[k]])){
categorical<-append(categorical, k)
table2<-data%>%
select(categorical)
for (i in 1:length(table2)){
x<-unlist(table2[,i])
table_c<-table2%>%
na.omit()%>%
group_by(.dots=categorical[i])%>%
summarise(variable=categorical[i], n=n())%>%
mutate(pct=round(n/sum(n), digits=digits))
colnames(table_c)<-c("level","variable",'n', 'pct')
table_c<- table_c[c("variable", "level", "n", 'pct')]
# long labels
table_c$level <- substr(table_c$level, 1, label_length)
# many levels
if (nrow(table_c)>maxcat){
table_c$level<-as.character(table_c$level)
row_final<-c(variable=categorical[i], level="<...>",
n=sum(table_c$n[(maxcat+1):nrow(table_c)]),
pct=sum(table_c$pct[(maxcat+1):nrow(table_c)]))
table_c = table_c[1:maxcat,]
table_c= rbind(table_c, row_final)
cdf<-rbind(cdf, table_c)}
else{
cdf<-rbind(cdf, table_c)
}
cdf$variable[duplicated(cdf$variable)] <- " "
}
}
}
if (nrow(ndf)>0){
cat("\nQuantitative Variables\n",
"======================\n", sep="")
print (data.frame(ndf), row.names=FALSE)
}
if (nrow(cdf)>0){
cat("\nCategorical Variables\n",
"=====================\n", sep="")
print (data.frame(cdf), row.names=FALSE, right=FALSE)
}
}
general_summary(df, digits)
variable_summary(df, digits)
invisible(df)
}
df_summary(cars74)
?blue
