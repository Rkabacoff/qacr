flagged. Optionally, marginal distributions
(histograms, boxplots, density curves,
violin plots) can be added to the margins of the plot.",
"Description"
))
kbl(d) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
build_site()
build_site()
build_site()
build_site()
# import data
data(iris)
force(iris)
View(iris)
df <- iris[1:4]
df <- scale(df)
fit <- kmeans(df, 3)
names(fit)
fit$cluster
cluster <- df$cluster
df$cluster
names(df)
df <- iris[1:4]
fit$cluster
df$cluster <- fit$cluster
View(df)
cluster <- df$cluster
df <- scale(df)
df$cluster <- cluster
View(df)
df <- iris[1:4]
df <- scale(df)
fit <- kmeans(df, 3)
df$cluster <- fit$cluster
df <- iris[1:4]
df <- scale(df)
df <- as.data.frame(scale(df))
fit <- kmeans(df, 3)
df$cluster <- fit$cluster
cluster <- df$cluster
View(df)
?standardize
build_site()
build_site()
build_site()
library(pkgdown)
build_site()
d <- data.frame(Use=c("Mapping",
"Regression",
"Classification",
"Text Mining"),
,
Datasets=c("border, countries, crashes, farmer_markets,
hostels, hate_crimes, housing, venues",
"batting, Boston, cardata, cars74, coffee,
googleplay, insurance, student, tv",
"appointments, breast, contraception,
heart, ",
"movies, wine"))
d <- data.frame(Ideas=c("Mapping",
"Regression",
"Classification",
"Text Mining"),
,
Datasets=c("border, countries, crashes, farmer_markets,
hostels, hate_crimes, housing, venues",
"batting, Boston, cardata, cars74, coffee,
googleplay, insurance, student, tv",
"appointments, breast, contraception,
heart, ",
"movies, wine"))
d <- data.frame(Ideas=c("Mapping",
"Regression",
"Classification",
"Text Mining"),
Datasets=c("border, countries, crashes, farmer_markets,
hostels, hate_crimes, housing, venues",
"batting, Boston, cardata, cars74, coffee,
googleplay, insurance, student, tv",
"appointments, breast, contraception,
heart, ",
"movies, wine"))
kbl(d) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
library(pkgdown)
build_site()
library(qacr)
data(cars74)
scale(cars74)
?scale
?stderr
mtcars$cyl <- factor(mtcars$cyl)
is.factor(mtcars$cyl)
is.numeric(mtcars$cyl)
std <- function(x, mean=0, sd=1){
if(is.numeric(x)){
x <- x[!is.na(x)]
x <- (x - mean(x))/sd(x)
x <- (x + mean)*sd
return(x)
}
}
test <- std(mtcars$mpg)
mean(test)
sd(test)
test <- std(mtcars$mpg, mean=50, sd=10)
mean(test)
sd(test)
test <- std(mtcars$mpg, mean=5, sd=10)
mean(test)
sd(test)
std <- function(x, mean=0, sd=1){
if(is.numeric(x)){
x <- x[!is.na(x)]
x <- (x - mean(x))/sd(x)
x <- x*sd + mean
return(x)
}
}
test <- std(mtcars$mpg, mean=5, sd=10)
mean(test)
sd(test)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
return(x)
}
}
data <- sapply(data, std)
return(data)
}
data(cars74)
x <- standardize(cars74)
View(x)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
return(x)
}
}
data <- lapply(data, std)
return(data)
}
data(cars74)
x <- standardize(cars74)
View(x)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
return(x)
}
}
data <- sapply(data, std)
return(data)
}
debug(standardize)
x <- standardize(cars74)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
sapply(data, std)
}
data(cars74)
x <- standardize(cars74)
View(x)
View(cars74)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x) & !is.factor(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
sapply(data, std)
}
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x) & !is.factor(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
sapply(data, std)
}
data(cars74)
x <- standardize(cars74)
View(x)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x) & !is.factor(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for(i in seq_along(data)){
data[[, i]] <- standardize(data[[, i]])
}
return(data)
}
data(cars74)
View(cars74)
x <- standardize(cars74)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x) & !is.factor(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for(i in seq_along(data)){
data[, i] <- standardize(data[, i])
}
return(data)
}
x <- standardize(cars74)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x) & !is.factor(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for(i in seq_along(data)){
data[[i]] <- standardize(data[[i]])
}
return(data)
}
data(cars74)
x <- standardize(cars74)
cars74[[1]]
cars74[[2]]
cars74[[3]]
seq_along(cars74)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x) & !is.factor(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for(i in seq_along(data)){
data[[i]] <- standardize(data[[i]])
}
return(data)
}
data(cars74)
debug(standardize)
x <- standardize(cars74)
data[[1]]
data
class(data)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x, mean, sd) {
if (is.numeric(x) & !is.factor(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
sapply(data, std)
}
x <- standardize(cars74)
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x) & !is.factor(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
sapply(data, std)
}
x <- standardize(cars74)
x
standardize <- function(data, mean = 0, sd = 1) {
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
sapply(data, std)
}
data(cars74)
str(cars74)
x <- standardize(cars74)
str(x)
class(x)
if(!is.data.frame(data)) stop("data must be a data frame")
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i = 1:ncol(data)){
}
}
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i = 1:ncol(data)){
}
}
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i = 1:ncol(data)){
#hello
}
}
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
}
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- standardize(data[[i]])
}
return(data)
}
data(cars74)
x <- standardize(cars74)
class(cars74)
?standardize
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- standardize(data[[i]])
}
return(data)
}
data(cars74)
debug(standardize)
x <- standardize(cars74)
class(data)
class(data)
data[, i]
data[[i]]
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
return(sapply(data, std))
}
data(cars74)
x <- standardize(cars74)
View(x)
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
data(cars74)
debug(standardize)
x <- standardize(cars74)
data[, i]
data[, 2]
data[, 3]
data[, 3]
data
data
str(x)
x
?normalizePath
?normalize
?norm
normalize <- function(data, lower = 0, upper = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
rerange <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
xmin <- min(x)
xmax <- max(x)
x <- (upper - lower)/(xmax-xmin)*(x-xmin)+lower
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- rerange(data[[i]])
}
return(data)
}
data(cars74, package="cars74")
normalize <- function(data, lower = 0, upper = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
rerange <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
xmin <- min(x)
xmax <- max(x)
x <- (upper - lower)/(xmax-xmin)*(x-xmin)+lower
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- rerange(data[[i]])
}
return(data)
}
data(cars74, package="cars74")
data(cars74, package="qacr")
summary(cars74)
x <- normalize(cars74)
summarize(x)
summary(x)
