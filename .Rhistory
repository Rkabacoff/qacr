rerange <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
xmin <- min(x)
xmax <- max(x)
x <- (upper - lower)/(xmax-xmin)*(x-xmin)+lower
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- rerange(data[[i]])
}
return(data)
}
data(cars74, package="cars74")
data(cars74, package="qacr")
summary(cars74)
x <- normalize(cars74)
summarize(x)
summary(x)
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
if(length(unique(x))>2){
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
x <- standardize(cars74)
data(cars74, package="cars74")
data(cars74, package="qacr")
x <- standardize(cars74)
summary(x)
x <- standardize(mtcars)
summary(mtcars)
summary(x)
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
if(length(unique(x))>2){
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
}
return(x)
}
# for (i in 1:ncol(data)){
#   data[, i] <- std(data[[i]])
data <- lapply(data, std)
#}
return(data)
}
data(cars74, package="qacr")
x <- standardize(cars74)
View(x)
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
if(length(unique(x))>2){
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
data(cars74, package="qacr")
x <- standardize(cars74)
View(x)
table(mtcars$am)
mtcars
table(mtcars$vs)
unique(mtcars$vs)
unique(mtcars$am)
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
if(unique(x) != c(0, 1)){
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
data(cars74, package="qacr")
x <- standardize(cars74)
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
if(!all(unique(x) == c(0, 1))){
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
data(cars74, package="qacr")
x <- standardize(cars74)
x <- unique(mtcars$am)
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
# is this a dummy coded variable
values <- unique(x)
cond1 <- length(values) == 2
cond2 <- values[1] == 1
cond3 <- values[2] == 1
dummy <- cond1 & cond2 & cond3
if (is.numeric(x) & !dummy) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
data(cars74, package="qacr")
x <- standardize(cars74)
View(x)
x <- standardize(mtcars)
View(x)
debug(standardize)
x <- standardize(mtcars)
mtcars
data[,i]
unique(data[,i])
length(unique(data[,i]))
unique[,i][1] ==1
unique(data[,i])[1] ==1
unique(data[,i])
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
# is this a dummy coded variable
values <- unique(x)
cond1 <- length(values) == 2
cond2 <- values[1] == 0
cond3 <- values[2] == 1
dummy <- cond1 & cond2 & cond3
if (is.numeric(x) & !dummy) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
data(cars74, package="qacr")
x <- standardize(cars74)
View(x)
x <- standardize(mtcars)
View(x)
View(x)
unique(mtcars$am)
standardize <- function(data, mean = 0, sd = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
# is this a dummy coded variable
values <- unique(x)
values <- values[order(values)]
cond1 <- length(values) == 2
cond2 <- values[1] == 0
cond3 <- values[2] == 1
dummy <- cond1 & cond2 & cond3
if (is.numeric(x) & !dummy) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
data(cars74, package="qacr")
x <- standardize(cars74)
View(x)
x <- standardize(mtcars)
View(x)
normalize <- function(data, new_min = 0, new_max = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
rerange <- function(x) {
# is this a dummy coded variable
values <- unique(x)
values <- values[order(values)]
cond1 <- length(values) == 2
cond2 <- values[1] == 0
cond3 <- values[2] == 1
dummy <- cond1 & cond2 & cond3
if (is.numeric(x) & !dummy) {
x <- x[!is.na(x)]
oldmin <- min(x)
newmax <- max(x)
x <- (new_max - new_min)/(newmax-oldmin)*(x-oldmin)+new_min
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- rerange(data[[i]])
}
return(data)
}
x <- normalize(mtcars)
View(x)
standardize <- function(data, mean = 0, sd = 1,
include_dummy=FALSE) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
# is this a numeric variable
number <- is.numeric(x)
# is this a dummy coded variable
values <- unique(x)
values <- values[order(values)]
cond1 <- length(values) == 2
cond2 <- values[1] == 0
cond3 <- values[2] == 1
dummy <- cond1 & cond2 & cond3
# which variables to standardize
if (include_dummy){
doit <- number
} else {
doit <- number & !dummy
}
if (doit) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
data(cars74, package="qacr")
x <- standardize(cars74)
View(x)
x <- standardize(mtcars)
View(x)
library(qacr)
library(qacr)
library(pkgdown)
build_site()
build_site()
qstats(cars74)
qstats(cardata)
qstats(mtcars)
?qstats
qstats
library(qacr)
build_site()
build_site()
build_site()
build_site()
library(qacr)
build_site()
normalize2 <- function(data, new_min = 0, new_max = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
rerange <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
oldmin <- min(x)
newmax <- max(x)
x <- (new_max - new_min)/(newmax-oldmin)*(x-oldmin)+new_min
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- rerange(data[[i]])
}
return(data)
}
x <- normalize2(mtcars)
data(mtcars)
force(mtcars)
View(mtcars)
View(mtcars)
View(x)
library(qacr)
build_site()
build_site()
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
?mean
library(qacr)
system.time({x <- standardize(pbp2018)})
summary(pbp2018)
summary(x)
build_site()
library(pkgdown)
build_site()
system.time({x <- normalize(pbp2018)})
summary(x)
wss_plot <- function(data, nc=15, seed=1234){
require(ggplot2)
# standardize data
if(any(sapply(data, !is.numeric)))stop("data must be numeric.")
data <- standarize(data)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
results <- data.frame(cluster=1:nc, wss=wss)
print(results)
ggplot(results, aes(x=cluster,y=wss)) +
geom_point(color="steelblue", size=2) +
geom_line(color="grey") +
theme_bw() +
labs(title="WSS Plot for Determining the Number of Clusters",
x="Number of Clusters",
y="Within groups sum of squares")
}
names(iris)
library(qacr)
library(pkgdown)
rm(wss_plot)
build_site()
build_site()
wss_plot <- function(data, nc=15, seed=1234){
require(ggplot2)
# standardize data
if(any(sapply(data, !is.numeric)))stop("data must be numeric.")
data <- standarize(data)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
results <- data.frame(cluster=1:nc, wss=wss)
print(results)
ggplot(results, aes(x=cluster,y=wss)) +
geom_point(color="steelblue", size=2) +
geom_line(color="grey") +
theme_bw() +
labs(title="WSS Plot for Determining the Number of Clusters",
x="Number of Clusters",
y="Within groups sum of squares")
}
sapply(iris, !is.numeric)
sapply(iris, is.numeric)
wss_plot <- function(data, nc=15, seed=1234){
require(ggplot2)
# standardize data
if(!any(sapply(data, is.numeric)))stop("data must be numeric.")
data <- standarize(data)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
results <- data.frame(cluster=1:nc, wss=wss)
print(results)
ggplot(results, aes(x=cluster,y=wss)) +
geom_point(color="steelblue", size=2) +
geom_line(color="grey") +
theme_bw() +
labs(title="WSS Plot for Determining the Number of Clusters",
x="Number of Clusters",
y="Within groups sum of squares")
}
wss_plot(iris[-5])
library(qacr)
wss_plot(iris[-5])
?standardize
standardize(mtcars)
wss_plot(iris[-5])
wss_plot <- function(data, nc=15, seed=1234){
require(ggplot2)
# standardize data
if(!any(sapply(data, is.numeric)))stop("data must be numeric.")
data <- standardize(data)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
results <- data.frame(cluster=1:nc, wss=wss)
print(results)
ggplot(results, aes(x=cluster,y=wss)) +
geom_point(color="steelblue", size=2) +
geom_line(color="grey") +
theme_bw() +
labs(title="WSS Plot for Determining the Number of Clusters",
x="Number of Clusters",
y="Within groups sum of squares")
}
wss_plot(iris[-5])
library(qacr)
library(qacr)
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
library(NbClust)
?NbClust
df <- iris[-5]
df <- iris[-5]
df <- scale(df)
x <- NbClust(df)
x <- NbClust(df, method='kmeans')
names(x)
class(x)
x$All.index
x$Best.nc
data(wine, package="rattle")
names(wine)
wine <- wine[-1]
x <- NbClust(wine, method='kmeans')
x$All.index
x$Best.nc
library(qacr)
library(pkgdown)
build_site()
library(qacr)
build_site()
?score
methods(score)
library(qacr)
build_site()
build_site()
build_site()
library(qacr)
build_site()
build_site()
library(qacr)
build_site()
build_site()
build_site()
library(qacr)
build_site()
library(qacr)
factorextra::fviz_pca_biplot
factoextra::fviz_pca_biplot
factoextra::fviz_pca_biplot
factoextra::fviz_pca_biplot
library(qacr)
library(qacr)
library(qacr)
library(factoextra)
?fviz_pca_biplot
library(dplyr)
?mutate
?transmute
library(qacr)
library(qacr)
build_site()
?dplyr
library(qacr)
build_site()
library(qacr)
build_site()
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
build_site()
library(DependenciesGraph)
install.packages("DependenciesGraph")
install.packages(DependenciesGraph"")
install.packages("DependenciesGraph")
devtools::install_github("datastorm-open/DependenciesGraphs")
devtools::install_github("datastorm-open/DependenciesGraphs")
