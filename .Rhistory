}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
data(cars74, package="qacr")
x <- standardize(cars74)
View(x)
x <- standardize(mtcars)
View(x)
normalize <- function(data, new_min = 0, new_max = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
rerange <- function(x) {
# is this a dummy coded variable
values <- unique(x)
values <- values[order(values)]
cond1 <- length(values) == 2
cond2 <- values[1] == 0
cond3 <- values[2] == 1
dummy <- cond1 & cond2 & cond3
if (is.numeric(x) & !dummy) {
x <- x[!is.na(x)]
oldmin <- min(x)
newmax <- max(x)
x <- (new_max - new_min)/(newmax-oldmin)*(x-oldmin)+new_min
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- rerange(data[[i]])
}
return(data)
}
x <- normalize(mtcars)
View(x)
standardize <- function(data, mean = 0, sd = 1,
include_dummy=FALSE) {
if(!is.data.frame(data)) stop("data must be a data frame")
std <- function(x) {
# is this a numeric variable
number <- is.numeric(x)
# is this a dummy coded variable
values <- unique(x)
values <- values[order(values)]
cond1 <- length(values) == 2
cond2 <- values[1] == 0
cond3 <- values[2] == 1
dummy <- cond1 & cond2 & cond3
# which variables to standardize
if (include_dummy){
doit <- number
} else {
doit <- number & !dummy
}
if (doit) {
x <- x[!is.na(x)]
x <- (x - mean(x)) / sd(x)
x <- x * sd + mean
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- std(data[[i]])
}
return(data)
}
data(cars74, package="qacr")
x <- standardize(cars74)
View(x)
x <- standardize(mtcars)
View(x)
library(qacr)
library(qacr)
library(pkgdown)
build_site()
build_site()
qstats(cars74)
qstats(cardata)
qstats(mtcars)
?qstats
qstats
library(qacr)
build_site()
build_site()
build_site()
build_site()
library(qacr)
build_site()
normalize2 <- function(data, new_min = 0, new_max = 1) {
if(!is.data.frame(data)) stop("data must be a data frame")
rerange <- function(x) {
if (is.numeric(x)) {
x <- x[!is.na(x)]
oldmin <- min(x)
newmax <- max(x)
x <- (new_max - new_min)/(newmax-oldmin)*(x-oldmin)+new_min
}
return(x)
}
for (i in 1:ncol(data)){
data[, i] <- rerange(data[[i]])
}
return(data)
}
x <- normalize2(mtcars)
data(mtcars)
force(mtcars)
View(mtcars)
View(mtcars)
View(x)
library(qacr)
build_site()
build_site()
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
?mean
library(qacr)
system.time({x <- standardize(pbp2018)})
summary(pbp2018)
summary(x)
build_site()
library(pkgdown)
build_site()
system.time({x <- normalize(pbp2018)})
summary(x)
wss_plot <- function(data, nc=15, seed=1234){
require(ggplot2)
# standardize data
if(any(sapply(data, !is.numeric)))stop("data must be numeric.")
data <- standarize(data)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
results <- data.frame(cluster=1:nc, wss=wss)
print(results)
ggplot(results, aes(x=cluster,y=wss)) +
geom_point(color="steelblue", size=2) +
geom_line(color="grey") +
theme_bw() +
labs(title="WSS Plot for Determining the Number of Clusters",
x="Number of Clusters",
y="Within groups sum of squares")
}
names(iris)
library(qacr)
library(pkgdown)
rm(wss_plot)
build_site()
build_site()
wss_plot <- function(data, nc=15, seed=1234){
require(ggplot2)
# standardize data
if(any(sapply(data, !is.numeric)))stop("data must be numeric.")
data <- standarize(data)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
results <- data.frame(cluster=1:nc, wss=wss)
print(results)
ggplot(results, aes(x=cluster,y=wss)) +
geom_point(color="steelblue", size=2) +
geom_line(color="grey") +
theme_bw() +
labs(title="WSS Plot for Determining the Number of Clusters",
x="Number of Clusters",
y="Within groups sum of squares")
}
sapply(iris, !is.numeric)
sapply(iris, is.numeric)
wss_plot <- function(data, nc=15, seed=1234){
require(ggplot2)
# standardize data
if(!any(sapply(data, is.numeric)))stop("data must be numeric.")
data <- standarize(data)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
results <- data.frame(cluster=1:nc, wss=wss)
print(results)
ggplot(results, aes(x=cluster,y=wss)) +
geom_point(color="steelblue", size=2) +
geom_line(color="grey") +
theme_bw() +
labs(title="WSS Plot for Determining the Number of Clusters",
x="Number of Clusters",
y="Within groups sum of squares")
}
wss_plot(iris[-5])
library(qacr)
wss_plot(iris[-5])
?standardize
standardize(mtcars)
wss_plot(iris[-5])
wss_plot <- function(data, nc=15, seed=1234){
require(ggplot2)
# standardize data
if(!any(sapply(data, is.numeric)))stop("data must be numeric.")
data <- standardize(data)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
results <- data.frame(cluster=1:nc, wss=wss)
print(results)
ggplot(results, aes(x=cluster,y=wss)) +
geom_point(color="steelblue", size=2) +
geom_line(color="grey") +
theme_bw() +
labs(title="WSS Plot for Determining the Number of Clusters",
x="Number of Clusters",
y="Within groups sum of squares")
}
wss_plot(iris[-5])
library(qacr)
library(qacr)
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
library(NbClust)
?NbClust
df <- iris[-5]
df <- iris[-5]
df <- scale(df)
x <- NbClust(df)
x <- NbClust(df, method='kmeans')
names(x)
class(x)
x$All.index
x$Best.nc
data(wine, package="rattle")
names(wine)
wine <- wine[-1]
x <- NbClust(wine, method='kmeans')
x$All.index
x$Best.nc
library(qacr)
library(pkgdown)
build_site()
library(qacr)
build_site()
?score
methods(score)
library(qacr)
build_site()
build_site()
build_site()
library(qacr)
build_site()
build_site()
library(qacr)
build_site()
build_site()
build_site()
library(qacr)
build_site()
library(qacr)
factorextra::fviz_pca_biplot
factoextra::fviz_pca_biplot
factoextra::fviz_pca_biplot
factoextra::fviz_pca_biplot
library(qacr)
library(qacr)
library(qacr)
library(factoextra)
?fviz_pca_biplot
library(dplyr)
?mutate
?transmute
library(qacr)
library(qacr)
build_site()
?dplyr
library(qacr)
build_site()
library(qacr)
build_site()
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
library(qacr)
build_site()
build_site()
library(DependenciesGraph)
install.packages("DependenciesGraph")
install.packages(DependenciesGraph"")
install.packages("DependenciesGraph")
devtools::install_github("datastorm-open/DependenciesGraphs")
devtools::install_github("datastorm-open/DependenciesGraphs")
library(qacr)
library(gtools)
getDependencies("qacr", "Imports")
getDependencies("haven", "Imports")
getDependencies("purrr", "Imports")
getDependencies("ggcorrplot", "Imports")
getDependencies("vroom", "Imports")
getDependencies("plotROC", "Imports")
getDependencies("scales", "Imports")
getDependencies("ggExtra", "Imports")
library(gtools)
?gtools
phelp(gtools)
library(DependenciesGraph)
library(qacr) # A package I'm developing
deps <- funDependencies("package:QualtricsTools", "contents")
deps <- funDependencies("package:QualtricsTools", "contents")
?DependenciesGraph
phelp(DependenciesGraph)
phelp(DependenciesGraph)
library(DependenciesGraph)
library(DependenciesGraphs)
library(qacr) # A package I'm developing
deps <- funDependencies("package:QualtricsTools", "contents")
deps <- funDependencies("package:qacr", "contents")
plot(deps)
deps <- funDependencies("package:qacr", "import")
plot(deps)
deps <- funDependencies("package:qacr", "import")
deps <- funDependencies("package:qacr", "recodes")
pack <- available.packages()
pack["qacr","Depends"]
head(pack)
pack["qacr", ]
x <- as.data.frame(pack)
View(x)
getDependencyTree <- function(pack, i = -1, depLevel = c("Depends", "Imports", "LinkingTo"), availablePackages = available.packages()) {
if(i == -1) cat(pack, "\n")
i <- i + 1
packages <- unlist(tools::package_dependencies(pack, availablePackages, which = depLevel))
for(pkg in packages) {
for(n in 0:i) {
cat(" ")
}
cat("|", pkg, "\n")
getDependencyTree(pkg, i, depLevel)
}
} ## end function getDependencyTree()
getDependencyTree("qacr")
?available.packages
ggplot2::scale_file_gradient2
library(qacr)
getDependencyTree("qacr")
getDependencies("ggExtra", "Imports")
getDependencies("qacr", "Imports")
library(qacr)
library(gtools)
getDependencies("qacr", "Imports")
library(qacr)
getDependencies("qacr", "Imports")
getDependencies("plotROC", "Imports")
library(qacr)
getDependencies("qacr", "Imports")
factoextra::fviz_pca_biplot
getDependencies("factoextra", "Imports")
getDependencies("factoextra", "Imports")
library(qacr)
getDependencies("qacr", "Imports")
library(qacr)
getDependencies("qacr", "Imports")
getDependencies("qacr", "Imports")
getDependencies("psych", "Imports")
getDependencies("ggcorrplot", "Imports")
library(qacr)
getDependencies("qacr", "Imports")
library(qacr)
getDependencies("qacr", "Imports")
scales::pretty_breaks
pretty
?pretty
library(qacr)
?forceAndCall
pretty_breaks <- function(n=5, ...){
force_all(n, ...)
n_default <- n
function(x, n = n_default) {
breaks <- pretty(x, n, ...)
names(breaks) <- attr(breaks, "labels")
breaks
}
}
pretty_breaks()
force_all <- function(...) list(...)
pretty_breaks <- function(n=5, ...){
force_all(n, ...)
n_default <- n
function(x, n = n_default) {
breaks <- pretty(x, n, ...)
names(breaks) <- attr(breaks, "labels")
breaks
}
}
pretty_breaks()
pretty_breaks(5)
library(qacr)
library(qacr)
library(qacr)
library(qacr)
setwd("C:/Users/rkaba/Desktop/add to qacr/FPS")
df <- import("data.csv")
df <- as.data.frame(df)
dfx <- read.csv("data.csv", sep="\t")
df <- df[1:10, c(1,64)]
dfx <- dfx[1:10, c(1, 64)]
df2 <- recodes(df, "age", "$ > 90", NA)
df2
df2 <- recodes(dfx, "age", "$ > 90", NA)
df2 <- recodes(df, "age", "$ > 20", NA)
df2
library(usethis)
use_vignette("recodes", "Recoding Variables")
library(qacr)
library(pkgdown)
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
library(qacr)
library(pkgdown)
build_site()
library(qacr)
build_site()
data(package="qacr")
contents(crashes)
contents(breast)
contents(coffee)
contents(hostels)
contents(border)
contents(batting)
contents(amazon)
contents(heart)
library(qacr)
build_site()
library(qacr)
library(pkgdown)
build_site()
library(qacr)
build_site()
library(qacr)
?recodes
library(qacr)
?recodes
library(qacr)
?recodes
library(qacr)
?recodes
library(qacr)
?recodes
library(qacr)
?recodes
library(qacr)
?recodes
build_site()
library(qacr)
?recodes
library(qacr)
?recodes
build_site()
df <- data.frame(x = c(1, 2, 3),
y = c("a", "b", "c"),
z = c("d", "e", "f"))
df$y <- factor(df$y)
str(df)
df2 <- recodes(df, "x", 1, "YYY")
df2
str(df2)
df2 <- recodes(df, "y", "a", 1)
df2
df2
str(df2)
df2 <- recodes(df, "y", c("a", "b", "c"), c(1, 2, 3))
df2
str(df2)
df <- data.frame(x = c(1, 2, 3),
y = c("a", "b", "c"),
z = c("d", "e", "f"))
df$y <- factor(df$y)
str(df)
df2 <- recodes(df, "y", c("a", "b", "c"), c(1, 2, 3))
df2
str(df2)
df2 <- recodes(df, "y", c("a", "b", "c"), c("aa", "bb", "cc"))
df2
str(df2)
df2 <- recodes(df, "z", c("d", "e", "f"), c("aa", "bb", "cc"))
df2
str(df2)
